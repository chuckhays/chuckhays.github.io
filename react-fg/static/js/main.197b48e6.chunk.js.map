{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MainApp","props","state","registered","waiting","this","data","onSubmit","handleSubmit","setTimeout","setState","React","Component","SignUpForm","bind","handleInputChange","className","type","id","name","required","placeholder","onChange","e","preventDefault","event","target","value","Confirmation","firstName","class","email","alert","Spinner","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAWMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,GACb,EAAKA,MAAQ,CAAEC,YAAY,EAAOC,SAAS,GAH1B,E,sEAKT,IAAD,OACP,OAAIC,KAAKH,MAAME,QAEX,6BACE,kBAAC,EAAD,OAGKC,KAAKH,MAAMC,WAElB,6BACE,kBAAC,EAAD,CAAcG,KAAMD,KAAKH,MAAMI,QAKjC,6BACE,kBAAC,EAAD,CAAYC,SAAU,SAACD,GAAD,OAAU,EAAKE,aAAaF,S,mCAK7CA,GAAO,IAAD,OAGjBG,WAAW,WAAO,EAAKC,SAAS,CAACP,YAAY,EAAMC,SAAS,KAAW,KACvEC,KAAKK,SAAS,CAACN,SAAS,EAAM,KAAQE,Q,GA/BpBK,IAAMC,WAmCtBC,E,YACJ,WAAYZ,GAAQ,IAAD,8BACjB,4CAAMA,KACDO,aAAe,EAAKA,aAAaM,KAAlB,gBACpB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBAHR,E,sEAMjB,OACE,6BACA,uBAAGE,UAAU,YAAb,SACA,uBAAGA,UAAU,YAAb,WACA,uBAAGA,UAAU,QAAb,+FACA,0BAAMA,UAAU,UAAUT,SAAUF,KAAKG,cACvC,6BACA,2BAAOS,KAAK,OAAOC,GAAG,YAAYC,KAAK,YAAYC,UAAQ,EAACC,YAAY,aAAaC,SAAUjB,KAAKU,qBAEpG,6BACA,2BAAOE,KAAK,QAAQC,GAAG,QAAQC,KAAK,QAAQC,UAAQ,EAACC,YAAY,QAAQC,SAAUjB,KAAKU,qBAExF,6BACA,2BAAOE,KAAK,WAAWC,GAAG,WAAWC,KAAK,WAAWC,UAAQ,EAACC,YAAY,WAAWC,SAAUjB,KAAKU,qBAEpG,6BACA,gD,mCAMOQ,GACXA,EAAEC,iBACFnB,KAAKJ,MAAMM,SAASF,KAAKH,S,wCAETuB,GAChB,IAAMC,EAASD,EAAMC,OACfC,EAAQD,EAAOC,MACfR,EAAOO,EAAOP,KAEpBd,KAAKK,SAAL,eACGS,EAAOQ,Q,GAvCWhB,IAAMC,WA4CzBgB,E,YACJ,WAAY3B,GAAQ,IAAD,8BACjB,4CAAMA,KACDO,aAAe,EAAKA,aAAaM,KAAlB,gBAFH,E,sEAKjB,OACE,6BACA,uBAAGE,UAAU,YAAb,YACA,uBAAGA,UAAU,YAAYX,KAAKJ,MAAMK,KAAKuB,UAAzC,KACA,uBAAGC,MAAM,QAAT,6GACA,uBAAGd,UAAU,YAAYX,KAAKJ,MAAMK,KAAKyB,OACzC,0BAAMf,UAAU,UAAUT,SAAUF,KAAKG,cACvC,+C,mCAKOe,GACXS,MAAM,4B,GAnBiBrB,IAAMC,WAuB3BqB,E,iLAEF,OACE,yBAAKjB,UAAU,WACb,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,wB,GALDL,IAAMC,WAWbsB,EAzHf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,QCMcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.197b48e6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainApp />\n    </div>\n  );\n}\n\nclass MainApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.state = { registered: false, waiting: false };\n  }\n  render() {\n    if (this.state.waiting) {\n      return (\n        <div>\n          <Spinner />\n        </div>\n      )\n    } else if (this.state.registered) {\n      return (\n        <div>\n          <Confirmation data={this.state.data}/>\n        </div>\n      )\n    } else {\n      return (\n        <div>\n          <SignUpForm onSubmit={(data) => this.handleSubmit(data)}/>\n          </div>\n      )\n    }\n  }\n  handleSubmit(data) {\n    // This is where registration could happen with a real API.\n    // Simulate a delay calling the async API.\n    setTimeout(() => {this.setState({registered: true, waiting: false});}, 3000);\n    this.setState({waiting: true, \"data\": data});\n  }\n}\n\nclass SignUpForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n  render() {\n    return (\n      <div>\n      <p className=\"heading1\">Let's</p>\n      <p className=\"heading2\">Sign Up</p>\n      <p className=\"help\">Use the form below to sign up for this super awesome service. You're only a few steps away!</p>\n      <form className=\"appForm\" onSubmit={this.handleSubmit}>\n        <div>\n        <input type=\"text\" id=\"firstName\" name=\"firstName\" required placeholder=\"First Name\" onChange={this.handleInputChange}></input>\n        </div>\n        <div>\n        <input type=\"email\" id=\"email\" name=\"email\" required placeholder=\"Email\" onChange={this.handleInputChange}></input>\n        </div>\n        <div>\n        <input type=\"password\" id=\"password\" name=\"password\" required placeholder=\"Password\" onChange={this.handleInputChange}></input>\n        </div>\n        <div>\n        <button>Sign Up</button>\n        </div>\n      </form>\n      </div>\n    )\n  }\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n  }\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n}\n\nclass Confirmation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  render() {\n    return (\n      <div>\n      <p className=\"heading1\">Welcome,</p>\n      <p className=\"heading2\">{this.props.data.firstName}!</p>\n      <p class=\"help\">You have been registered for this awesome service. Please check your email listed below for instructions.</p>\n      <p className=\"heading3\">{this.props.data.email}</p>\n      <form className=\"appForm\" onSubmit={this.handleSubmit}>\n        <button>Sign In</button>\n      </form>\n      </div>\n    )\n  }\n  handleSubmit(e) {\n    alert(\"Not yet implemented.\");\n  }\n}\n\nclass Spinner extends React.Component {\n  render() {\n    return (\n      <div className=\"spinner\">\n        <div className=\"double-bounce1\"></div>\n        <div className=\"double-bounce2\"></div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}